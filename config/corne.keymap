/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/ {

        macros {
                c_undo: c_undo {
                    compatible = "zmk,behavior-macro";
                    label = "new_macro_c_undo";
                    #binding-cells = <0>;
                    bindings =
                        <&macro_press &kp LCTRL>,
                        <&macro_tap &kp Z>,
                        <&macro_release &kp LCTRL>;
                };
                c_cut: c_cut {
                    compatible = "zmk,behavior-macro";
                    label = "new_macro_c_cut";
                    #binding-cells = <0>;
                    bindings = 
                        <&macro_press &kp LCTRL>,
                        <&macro_tap &kp X>,
                        <&macro_release &kp LCTRL>;
                };
                c_copy: c_copy {
                    compatible = "zmk,behavior-macro";
                    label = "new_macro_c_copy";
                    #binding-cells = <0>;
                    bindings = 
                        <&macro_press &kp LCTRL>,
                        <&macro_tap &kp C>,
                        <&macro_release &kp LCTRL>;
                };
                c_paste: c_paste {
                    compatible = "zmk,behavior-macro";
                    label = "new_macro_c_paste";
                    #binding-cells = <0>;
                    bindings = 
                        <&macro_press &kp LCTRL>,
                        <&macro_tap &kp V>,
                        <&macro_release &kp LCTRL>;
                };
            };
            
            combos {
                compatible = "zmk,combos";
                combo_Q {
                    timeout-ms = <50>;
                    key-positions = <1 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp Q>,
                        <&macro_release &kp RSHFT>;
                };
                combo_W {
                    timeout-ms = <50>;
                    key-positions = <2 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp W>,
                        <&macro_release &kp RSHFT>;
                };
                combo_E {
                    timeout-ms = <50>;
                    key-positions = <3 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp E>,
                        <&macro_release &kp RSHFT>;
                };
                combo_R {
                    timeout-ms = <50>;
                    key-positions = <4 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp R>,
                        <&macro_release &kp RSHFT>;
                };
                combo_T {
                    timeout-ms = <50>;
                    key-positions = <5 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp T>,
                        <&macro_release &kp RSHFT>;
                };
                combo_A {
                    timeout-ms = <50>;
                    key-positions = <13 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp A>,
                        <&macro_release &kp RSHFT>;
                };
                combo_S {
                    timeout-ms = <50>;
                    key-positions = <14 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp S>,
                        <&macro_release &kp RSHFT>;
                };
                combo_D {
                    timeout-ms = <50>;
                    key-positions = <15 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp D>,
                        <&macro_release &kp RSHFT>;
                };
                combo_F {
                    timeout-ms = <50>;
                    key-positions = <16 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp F>,
                        <&macro_release &kp RSHFT>;
                };
                combo_G {
                    timeout-ms = <50>;
                    key-positions = <17 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp G>,
                        <&macro_release &kp RSHFT>;
                };
                combo_Z {
                    timeout-ms = <50>;
                    key-positions = <25 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp Z>,
                        <&macro_release &kp RSHFT>;
                };
                combo_X {
                    timeout-ms = <50>;
                    key-positions = <26 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp X>,
                        <&macro_release &kp RSHFT>;
                };
                combo_C {
                    timeout-ms = <50>;
                    key-positions = <27 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp C>,
                        <&macro_release &kp RSHFT>;
                };
                combo_V {
                    timeout-ms = <50>;
                    key-positions = <28 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp V>,
                        <&macro_release &kp RSHFT>;
                };
                combo_B {
                    timeout-ms = <50>;
                    key-positions = <29 31 40>;
                    bindings = <&macro_press &kp RSHFT>,
                        <&macro_tap &kp B>,
                        <&macro_release &kp RSHFT>;
                };
            };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P    &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &kp SEMI &kp SQT
   &kp LSHFT &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &kp COMMA &kp DOT &kp FSLH &kp ESC
                  &kp LGUI &mo 1 &kp SPACE   &kp RET &mo 2 &kp RALT
                        >;
                };
                lower_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |   \    |   ~   |   `    |   "|"   |  &  |   |  (  |  7  |  8  |  9  |  )  | DEL  |
// |      |        |       |        |   LFT   | RGT |   |  {  |  4  |  5  |  6  |  }  |  0   |
// | SHFT | C_UNDO | C_CUT | C_COPY | C_PASTE | CAPS|   |  [  |  1  |  2  |  3  |  ]  | "|"  |
//                    | GUI |      | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp TAB        &kp BSLH    &kp TILDE  &kp GRAVE       &kp PIPE        &kp AMPS             &kp LPAR    &kp N7      &kp N8     &kp N9    &kp RPAR  &kp DEL
   &trans         &trans      &trans     &trans          &kp LEFT        &kp RIGHT            &kp LBRC    &kp N4      &kp N5     &kp N6    &kp RBRC  &kp N0
   &kp LSHFT      &c_undo     &c_cut     &c_copy         &c_paste        &kp CAPS             &kp LBKT    &kp N1      &kp N2     &kp N3    &kp RBKT  &kp PIPE
                          	         &kp LGUI        &trans          &kp SPACE            &kp RET     &trans      &kp RALT
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |   )   | BKSP  |
// | CTRL |  _  |  *  |  -  |  +  |  =  |   | UP  | DWN |     |     |RGB_EFF|RGB_TOG|
// | SHFT |  &  | LFT | RGT | DWN |  UP |   | BT5 | BT4 | BT3 | BT2 |  BT1  | BTCLR |
//                    | GUI |     | SPC |   | ENT |     | ALT |
                        bindings = <
   &kp  TAB   &kp EXCL    &kp AT              &kp HASH    &kp DLLR   &kp PRCNT    &kp CARET      &kp AMPS       &kp KP_MULTIPLY &kp LPAR      &kp RPAR         &kp BSPC
   &kp LCTRL  &kp UNDER   &kp KP_MULTIPLY     &kp MINUS   &kp PLUS   &kp EQUAL    &kp UP         &kp DOWN       &trans          &trans        &rgb_ug RGB_EFF  &rgb_ug RGB_TOG
   &kp LSHFT  &kp AMPS    &kp LEFT            &kp RIGHT   &kp DOWN   &kp UP       &none          &none   &bt BT_SEL 2    &bt BT_SEL 1  &bt BT_SEL 0     &bt BT_CLR
                    	                      &kp LGUI    &trans     &kp SPACE    &kp RET        &trans         &kp RALT
                        >;
                };
        };
};
